import { Mistral } from '@mistralai/mistralai';
import { BookContent, Chapter, PageContent } from '@shared/schema';
import { getEmptyBook, getEmptyChapter, getEmptyPage } from '../../client/src/lib/book-types';
import { v4 as uuidv4 } from 'uuid';
import { ImageService } from './image-service';

// Initialisation du client Mistral avec la cl√© API
const client = new Mistral({ apiKey: process.env.MISTRAL_API_KEY || '' });
const MODEL = 'mistral-large-latest';

// Interface pour les personnages personnalis√©s
export interface AICharacter {
  name?: string;
  autoGenerateName?: boolean;
  description?: string;
  alignment?: string;
  organization?: string;
  role?: string;
}

// Interface pour la demande de cr√©ation de livre IA
export interface AIBookRequest {
  prompt: string;
  chaptersCount?: number;
  pagesPerChapter?: number;
  authorName?: string;
  genre?: string;
  style?: string;
  narrativeMode?: string;  // first-person, third-person, etc.
  mainCharacter?: string;  // Description du personnage principal
  setting?: string;        // Cadre/√©poque de l'histoire
  targetAudience?: string; // Public cible (adultes, jeunesse, etc.)
  tone?: string;           // Ton de l'histoire (humoristique, s√©rieux, etc.)
  paceStyle?: string;      // Rythme (lent, rapide, etc.)
  
  // Nouvelles options
  additionalStyles?: string[]; // Styles d'√©criture suppl√©mentaires
  themes?: string[];           // Th√®mes suppl√©mentaires
  characters?: AICharacter[];  // Personnages suppl√©mentaires
  
  // Options d'images
  generateImages?: boolean;    // Activer/d√©sactiver la g√©n√©ration d'images
  imageStyle?: string;         // Style des images g√©n√©r√©es
  imageAspectRatio?: 'square' | 'portrait' | 'landscape' | 'panoramic';  // Format des images g√©n√©r√©es
}

/**
 * Service pour g√©n√©rer des livres avec l'IA Mistral
 */
export class AIService {
  /**
   * G√©n√®re un livre complet bas√© sur un prompt utilisateur
   */
  static async generateBook(request: AIBookRequest): Promise<BookContent> {
    const { 
      prompt, 
      chaptersCount = 3, 
      pagesPerChapter = 1,
      authorName,
      genre,
      style,
      narrativeMode,
      mainCharacter,
      setting,
      targetAudience,
      tone,
      paceStyle,
      additionalStyles = [],
      themes = [],
      characters = [],
      generateImages = true,
      imageStyle = 'realistic',
      imageAspectRatio = 'landscape'
    } = request;

    try {
      // Initialisation du service d'images
      ImageService.initialize();
      
      // G√©n√©ration du titre et structure g√©n√©rale du livre
      const bookStructure = await this.generateBookStructure(prompt, chaptersCount, authorName);
      
      // Cr√©ation du livre avec les informations g√©n√©r√©es
      const bookContent = getEmptyBook(bookStructure.title, bookStructure.author);
      
      // G√©n√©ration du contenu de chaque chapitre
      for (let i = 0; i < bookStructure.chapters.length; i++) {
        const chapterInfo = bookStructure.chapters[i];
        const chapter = getEmptyChapter(chapterInfo.title);
        
        // Si c'est le premier chapitre, on remplace la page existante, sinon on vide les pages
        chapter.pages = [];
        
        // G√©n√©ration des pages pour ce chapitre
        for (let j = 0; j < pagesPerChapter; j++) {
          const pageContent = await this.generatePageContent(
            prompt, 
            bookStructure.title, 
            chapterInfo.title, 
            chapterInfo.description,
            j,
            genre,
            style,
            narrativeMode,
            mainCharacter,
            setting,
            targetAudience,
            tone,
            paceStyle,
            additionalStyles,
            themes,
            characters
          );
          
          const page = getEmptyPage(j + 1);
          page.content = this.formatPageContent(pageContent);
          chapter.pages.push(page);
        }
        
        bookContent.chapters.push(chapter);
      }
      
      // Mise √† jour de la page de couverture avec une description plus d√©taill√©e
      if (bookContent.coverPage) {
        const coverDescription = await this.generateCoverDescription(prompt, bookStructure);
        bookContent.coverPage.content = this.formatCoverPage(bookContent.title, bookContent.author, coverDescription);
      }
      
      // Enrichissement du livre avec des images g√©n√©r√©es par IA si l'option est activ√©e
      if (generateImages) {
        console.log('üñºÔ∏è Enrichissement du livre avec des images g√©n√©r√©es par IA...');
        console.log(`Style d'image s√©lectionn√©: ${imageStyle}`);
        
        // Configurer les options d'images pour le service (supprim√© la variable pour √©viter la duplication)
        
        const enrichedBook = await ImageService.enrichBookWithImages(bookContent, {
          style: imageStyle,
          aspectRatio: imageAspectRatio
        });
        return enrichedBook;
      } else {
        console.log('‚è≠Ô∏è G√©n√©ration d\'images d√©sactiv√©e, aucune illustration ne sera ajout√©e.');
        return bookContent;
      }
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du livre:', error);
      throw new Error('√âchec de la g√©n√©ration du livre avec l\'IA');
    }
  }

  /**
   * G√©n√®re la structure de base du livre (titre, auteur, chapitres)
   */
  private static async generateBookStructure(prompt: string, chaptersCount: number, authorName?: string) {
    const authorInstruction = authorName 
      ? `Utilise "${authorName}" comme nom de l'auteur.` 
      : `G√©n√®re un nom d'auteur fictif.`;
    
    const structurePrompt = `Tu es un auteur de livre exp√©riment√©. Ton travail est de cr√©er le plan d'un nouveau livre bas√© sur cette demande: "${prompt}".
    
    G√©n√®re un titre accrocheur et cr√©atif, ${authorInstruction} Cr√©e ${chaptersCount} chapitres avec leurs titres et une br√®ve description.
    
    R√©ponds UNIQUEMENT au format JSON comme ceci:
    {
      "title": "Titre du livre",
      "author": "Nom de l'auteur",
      "chapters": [
        {
          "title": "Titre du chapitre 1",
          "description": "Br√®ve description du contenu du chapitre"
        },
        ...
      ]
    }`;

    const response = await client.chat.complete({
      model: MODEL,
      messages: [{ role: 'user', content: structurePrompt }]
    });

    try {
      if (!response.choices || !response.choices[0] || !response.choices[0].message) {
        throw new Error('R√©ponse de l\'API Mistral invalide');
      }
      
      const content = response.choices[0].message.content;
      if (typeof content !== 'string') {
        throw new Error('Format de contenu non pris en charge');
      }
      
      // Extraction de la partie JSON de la r√©ponse
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Format de r√©ponse invalide');
      }
      
      const jsonContent = jsonMatch[0];
      return JSON.parse(jsonContent);
    } catch (error) {
      console.error('Erreur lors du parsing de la structure du livre:', error);
      // Structure par d√©faut en cas d'erreur
      return {
        title: `Livre sur ${prompt}`,
        author: 'Auteur Anonyme',
        chapters: Array(chaptersCount).fill(0).map((_, i) => ({
          title: `Chapitre ${i + 1}`,
          description: `Contenu du chapitre sur ${prompt}`
        }))
      };
    }
  }

  /**
   * G√©n√®re le contenu d'une page sp√©cifique d'un chapitre
   */
  private static async generatePageContent(
    prompt: string, 
    bookTitle: string, 
    chapterTitle: string, 
    chapterDescription: string,
    pageIndex: number,
    genre?: string,
    style?: string,
    narrativeMode?: string,
    mainCharacter?: string,
    setting?: string,
    targetAudience?: string,
    tone?: string,
    paceStyle?: string,
    additionalStyles?: string[],
    themes?: string[],
    characters?: AICharacter[]
  ): Promise<string> {
    let genreDirective = '';
    if (genre) {
      switch (genre) {
        case 'fantasy':
          genreDirective = 'Utilise des √©l√©ments de fantasy: magie, cr√©atures fantastiques, mondes imaginaires.';
          break;
        case 'scifi':
          genreDirective = 'Utilise des √©l√©ments de science-fiction: technologies futuristes, voyages spatiaux, concepts scientifiques.';
          break;
        case 'romance':
          genreDirective = 'Utilise des √©l√©ments romantiques: √©motions fortes, relations interpersonnelles, d√©veloppement des sentiments.';
          break;
        case 'thriller':
          genreDirective = 'Utilise des √©l√©ments de thriller: suspense, tension, rythme soutenu.';
          break;
        case 'mystery':
          genreDirective = 'Utilise des √©l√©ments de myst√®re: indices, √©nigmes, r√©v√©lations progressives.';
          break;
        case 'horror':
          genreDirective = 'Utilise des √©l√©ments d\'horreur: peur, angoisse, atmosph√®re inqui√©tante.';
          break;
        case 'adventure':
          genreDirective = 'Utilise des √©l√©ments d\'aventure: d√©couvertes, voyages, d√©fis physiques.';
          break;
        case 'historical':
          genreDirective = 'Utilise des √©l√©ments historiques: pr√©cision historique, contexte d\'√©poque, personnages ou √©v√©nements r√©els.';
          break;
      }
    }
    
    let styleDirective = '';
    if (style) {
      switch (style) {
        case 'literary':
          styleDirective = 'Adopte un style litt√©raire recherch√© avec un vocabulaire riche et des figures de style √©labor√©es.';
          break;
        case 'minimalist':
          styleDirective = 'Adopte un style minimaliste avec des phrases courtes et un vocabulaire pr√©cis et concis.';
          break;
        case 'descriptive':
          styleDirective = 'Adopte un style tr√®s descriptif avec des d√©tails sensoriels riches pour immerger le lecteur.';
          break;
        case 'poetic':
          styleDirective = 'Adopte un style po√©tique avec des m√©taphores, des images fortes et un rythme musical.';
          break;
        case 'humorous':
          styleDirective = 'Adopte un style humoristique avec de l\'ironie, des situations comiques ou des jeux de mots.';
          break;
        case 'technical':
          styleDirective = 'Adopte un style technique avec un vocabulaire sp√©cialis√© et une approche pr√©cise et factuelle.';
          break;
        case 'conversational':
          styleDirective = 'Adopte un style conversationnel avec un ton familier et des dialogues naturels.';
          break;
      }
    }
    
    // Point de vue narratif
    let narrativeModeDirective = '';
    if (narrativeMode) {
      switch (narrativeMode) {
        case 'first-person':
          narrativeModeDirective = '√âcris √† la premi√®re personne (je/nous), en racontant l\'histoire directement du point de vue du personnage principal.';
          break;
        case 'second-person':
          narrativeModeDirective = '√âcris √† la deuxi√®me personne (tu/vous), en vous adressant directement au lecteur comme s\'il √©tait le personnage principal.';
          break;
        case 'third-person-limited':
          narrativeModeDirective = '√âcris √† la troisi√®me personne (il/elle/ils), en suivant la perspective d\'un seul personnage principal et ses pens√©es.';
          break;
        case 'third-person-omniscient':
          narrativeModeDirective = '√âcris √† la troisi√®me personne omnisciente, en connaissant et partageant les pens√©es de tous les personnages.';
          break;
        case 'multi-perspective':
          narrativeModeDirective = 'Utilise une perspective multiple, en alternant entre diff√©rents points de vue de personnages au cours du r√©cit.';
          break;
      }
    }
    
    // Description du personnage principal 
    let characterDirective = mainCharacter ? `Le personnage principal est: ${mainCharacter}. Int√®gre naturellement ses caract√©ristiques dans le r√©cit.` : '';
    
    // Cadre/√©poque
    let settingDirective = setting ? `L'histoire se d√©roule dans: ${setting}. Utilise cet environnement pour enrichir ton r√©cit.` : '';
    
    // Public cible
    let audienceDirective = '';
    if (targetAudience) {
      switch (targetAudience) {
        case 'children':
          audienceDirective = 'Adapte le contenu pour un jeune public (enfants), avec un vocabulaire simple et des th√®mes appropri√©s.';
          break;
        case 'young-adult':
          audienceDirective = 'Cible un public adolescent et jeunes adultes avec des th√®mes qui les concernent.';
          break;
        case 'adult':
          audienceDirective = '√âcris pour un public adulte, avec des th√®mes matures et un vocabulaire √©labor√©.';
          break;
        case 'all-ages':
          audienceDirective = 'Cr√©e un contenu accessible √† tous les √¢ges, avec diff√©rents niveaux de lecture.';
          break;
      }
    }
    
    // Ton de l'histoire
    let toneDirective = '';
    if (tone) {
      switch (tone) {
        case 'serious':
          toneDirective = 'Maintiens un ton s√©rieux et dramatique.';
          break;
        case 'humorous':
          toneDirective = 'Utilise un ton l√©ger et humoristique tout au long du texte.';
          break;
        case 'dark':
          toneDirective = 'Emploie un ton sombre et parfois inqui√©tant.';
          break;
        case 'uplifting':
          toneDirective = 'Cr√©e une atmosph√®re positive et inspirante.';
          break;
        case 'satirical':
          toneDirective = 'Adopte un ton satirique, critiquant subtilement des aspects de la soci√©t√©.';
          break;
        case 'melancholic':
          toneDirective = 'Donne une tonalit√© m√©lancolique et nostalgique au r√©cit.';
          break;
      }
    }
    
    // Rythme
    let paceDirective = '';
    if (paceStyle) {
      switch (paceStyle) {
        case 'fast':
          paceDirective = 'Utilise un rythme rapide avec des phrases courtes et une action soutenue.';
          break;
        case 'moderate':
          paceDirective = 'Maintiens un rythme √©quilibr√© entre action et description.';
          break;
        case 'slow':
          paceDirective = 'Privil√©gie un rythme lent et contemplatif, riche en d√©tails et en descriptions.';
          break;
        case 'varied':
          paceDirective = 'Alterne entre des passages rapides et des moments plus lents pour cr√©er du contraste.';
          break;
      }
    }
    
    const contentPrompt = `Tu es un √©crivain talentueux qui travaille sur le livre "${bookTitle}" inspir√© de cette demande: "${prompt}".
    
    Tu dois √©crire le contenu pour la page ${pageIndex + 1} du chapitre intitul√© "${chapterTitle}".
    Ce chapitre concerne: "${chapterDescription}".
    
    ${genreDirective}
    ${styleDirective}
    ${narrativeModeDirective}
    ${characterDirective}
    ${settingDirective}
    ${audienceDirective}
    ${toneDirective}
    ${paceDirective}
    
    ${additionalStyles && additionalStyles.length > 0 ? `Styles suppl√©mentaires: Int√®gre les styles d'√©criture suivants: ${additionalStyles.join(', ')}.` : ''}
    ${themes && themes.length > 0 ? `Th√®mes √† explorer: Aborde les th√®mes suivants: ${themes.join(', ')}.` : ''}
    ${characters && characters.length > 0 ? `Personnages suppl√©mentaires: ${characters.map(c => {
      const nameInfo = c.autoGenerateName 
        ? '(nom √† sugg√©rer)' 
        : c.name ? c.name : '';
      const role = c.role ? `r√¥le: ${c.role}` : '';
      const alignment = c.alignment ? `alignement: ${c.alignment}` : '';
      const organization = c.organization ? `appartient √†: ${c.organization}` : '';
      const description = c.description ? c.description : '';
      
      return `${nameInfo} ${role} ${alignment} ${organization} - ${description}`.trim();
    }).join('; ')}` : ''}
    
    √âcris un contenu engageant et d√©taill√©, avec de beaux paragraphes, qui correspond √† cette partie du livre.
    Ne mentionne pas le num√©ro de page ni le titre du chapitre dans le contenu.
    √âcris directement le contenu sous forme de texte riche (pas de balises HTML).`;

    try {
      const response = await client.chat.complete({
        model: MODEL,
        messages: [{ role: 'user', content: contentPrompt }]
      });

      if (!response.choices || !response.choices[0] || !response.choices[0].message) {
        throw new Error('R√©ponse de l\'API Mistral invalide');
      }
      
      const content = response.choices[0].message.content;
      if (typeof content !== 'string') {
        throw new Error('Format de contenu non pris en charge');
      }
      
      return content;
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du contenu de page:', error);
      return 'Le contenu n\'a pas pu √™tre g√©n√©r√©. Veuillez r√©essayer ou √©diter cette page manuellement.';
    }
  }

  /**
   * G√©n√®re une description pour la page de couverture
   */
  private static async generateCoverDescription(prompt: string, bookStructure: any): Promise<string> {
    const coverPrompt = `Tu es l'auteur du livre "${bookStructure.title}" inspir√© de cette demande: "${prompt}".
    
    √âcris une courte description accrocheuse pour la quatri√®me de couverture de ton livre.
    Cette description devrait donner envie aux lecteurs de d√©couvrir ton ≈ìuvre.
    Garde un ton professionnel et sois concis (100-150 mots).`;

    try {
      const response = await client.chat.complete({
        model: MODEL,
        messages: [{ role: 'user', content: coverPrompt }]
      });

      if (!response.choices || !response.choices[0] || !response.choices[0].message) {
        throw new Error('R√©ponse de l\'API Mistral invalide');
      }
      
      const content = response.choices[0].message.content;
      if (typeof content !== 'string') {
        throw new Error('Format de contenu non pris en charge');
      }
      
      return content;
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de la description de couverture:', error);
      return `D√©couvrez "${bookStructure.title}", un livre fascinant qui vous transportera dans un monde imaginaire inspir√© par "${prompt}".`;
    }
  }

  /**
   * Formate le contenu d'une page en HTML
   */
  private static formatPageContent(content: string): string {
    // Conversion du texte brut en HTML basique
    // S√©paration par paragraphes
    const paragraphs = content.split('\n\n');
    const htmlParagraphs = paragraphs
      .filter(p => p.trim())
      .map(p => `<p>${p.replace(/\n/g, '<br/>')}</p>`)
      .join('\n');
    
    return htmlParagraphs || '<p>√âcrivez votre contenu ici...</p>';
  }

  /**
   * Formate la page de couverture en HTML
   */
  private static formatCoverPage(title: string, author: string, description: string): string {
    return `<div style="text-align: center; margin-bottom: 30px;">
  <h1 style="font-size: 28px; font-weight: bold; margin-bottom: 10px;">${title}</h1>
  <h2 style="font-size: 20px; font-style: italic; margin-bottom: 20px;">par ${author}</h2>
  <p style="color: #666; font-size: 14px;">Cr√©√© sur Clustica - Magical avec l'aide de l'IA</p>
</div>
<div style="margin-top: 40px; background-color: #f8f9fa; border-left: 4px solid #6366F1; padding: 15px;">
  <p style="font-style: italic; line-height: 1.6;">${description}</p>
</div>`;
  }
}